┌──(ashraful㉿kali)-[~]
└─$ #!/bin/bash

# Variables to track requests between intervals
previous_requests=0
first_run=true

while true; do
  # Get the stats including total requests count
  stats=$(docker exec -it 79848d26b9ce curl -s http://localhost/nginx_status)
  
  # Extract total requests number (third number on the server line)
  total_requests=$(echo "$stats" | grep -o "server accepts handled requests" -A1 | 
                  tail -1 | awk '{print $3}')
  
  # First run just captures the baseline
  if [ "$first_run" = true ]; then
    previous_requests=$total_requests
    first_run=false
    echo "Starting monitoring..."
  else
    # Calculate actual RPS
    rps=$((total_requests - previous_requests))
    echo "$(date +"%H:%M:%S") | Actual RPS: $rps | Active connections: $(echo "$stats" | grep "Active" | awk '{print $3}')"
    previous_requests=$total_requests
  fi
  
  sleep 1
done

============================================= show the active rps from nginx : short the upper command =================================================
Here’s a more concise version of your script that achieves the same functionality but is shorter and more streamlined:

```bash
#!/bin/bash

prev=0
while true; do
  stats=$(docker exec -it 79848d26b9ce curl -s http://localhost/nginx_status)
  total=$(echo "$stats" | awk '/^[0-9]+/{print $3}')
  
  if [ $prev -ne 0 ]; then
    rps=$((total - prev))
    echo "$(date +"%H:%M:%S") | RPS: $rps | Active: $(echo "$stats" | awk '/Active/{print $3}')"
  fi
  
  prev=$total
  sleep 1
done
```

### Key Improvements:
1. **Removed unnecessary variables** like `first_run` by initializing `prev=0` and checking if it's non-zero.
2. **Simplified parsing** of `total_requests` using `awk` directly.
3. **Reduced redundancy** in extracting active connections.

This version maintains the same functionality while being more compact and easier to read.



========================================== another command for showing the active RPS form the Nginx ===========================================

Here’s how you can rewrite your script using `watch`:

```bash
watch -n 1 'docker exec -it 79848d26b9ce curl -s http://localhost/nginx_status | awk "/^[0-9]+/{total=\$3} /Active/{active=\$3} END {if (prev) printf \"%s | RPS: %d | Active: %d\n\", strftime(\"%H:%M:%S\"), total-prev, active; prev=total}"'
```

### Explanation:
- **`watch -n 1`**: Runs the command every 1 second (`-n 1` specifies the interval).
- **`docker exec -it 79848d26b9ce curl -s http://localhost/nginx_status`**: Fetches the Nginx status from the Docker container.
- **`awk`**:
  - `/^[0-9]+/`: Matches the line with numbers (the line containing `accepts`, `handled`, and `requests`), and extracts the third number (`requests`) into the variable `total`.
  - `/Active/`: Matches the line with "Active connections" and extracts the third field (number of active connections) into the variable `active`.
  - **`END` block**: 
    - If `prev` is set (i.e., not the first run), it calculates the RPS by subtracting the previous total from the current total.
    - Prints the timestamp, RPS, and active connections.
    - Updates `prev` with the current `total` for the next iteration.
  
### Key Points:
- **RPS Calculation**: The Requests Per Second (RPS) is calculated by subtracting the previous total requests from the current total requests.
- **Active Connections**: Extracted directly from the "Active connections" line.
- **Timestamp**: Uses `strftime("%H:%M:%S")` to format the current time.

### Example Output:
```
Every 1.0s: docker exec -it 79848d26b9ce curl -s http://localhost/nginx_status | awk ...

14:23:45 | RPS: 12 | Active: 5
```

